# -*- coding: utf-8 -*-
"""Tugas Pre Processing, EDA & Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-KAHQKm-l7296aupE5X-0-2_LAyfuGth
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

!cd "/content/drive/My Drive/"
!ls

df = pd.read_csv('/content/drive/My Drive/Data_Mining/forestfires.csv')
# df = df.dropna()
df

"""# PRE-PROCESSING

## Explore Data
"""

df.head()

df.info()

df.describe()

df.isnull().sum()

"""# EDA

## Univariate Non-graphical EDA

### Tabulation
"""

df['month'].value_counts()

df['temp'].value_counts()

df['wind'].value_counts()

df['RH'].value_counts()

df['FFMC'].value_counts()

df['DMC'].value_counts()

df['DC'].value_counts()

df['ISI'].value_counts()

"""### Central Tendency & Spread"""

df.describe()

"""### Skewness & Kurtosis"""

df.skew()

df.kurt()

"""## Univariate Graphical

### Histogram
"""

df.plot.hist()

df['X'].plot.hist()

df['Y'].plot.hist()

df['FFMC'].plot.hist()

df['DMC'].plot.hist()

df['DC'].plot.hist()

df['ISI'].plot.hist()

df['temp'].plot.hist()

df['RH'].plot.hist()

df['wind'].plot.hist()

df['rain'].plot.hist()

df['area'].plot.hist()

"""### Stem & Leaf Plots"""

import sys
!{sys.executable} -m pip install stemgraphic
import stemgraphic

data = df['X'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['Y'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['FFMC'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['DMC'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['DC'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['ISI'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['temp'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['RH'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['wind'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['rain'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

data = df['area'].head(10)
stemgraphic.stem_graphic(data, scale = 10)

"""### Boxplots"""

data = pd.DataFrame(df, columns=['X', 'Y', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'])
boxplot = data.boxplot(column=['X', 'Y', 'FFMC', 'DMC', 'DC', 'ISI', 'temp', 'RH', 'wind', 'rain', 'area'])

"""### Quantile-normal plots"""

import numpy as np
import statsmodels.api as sm
import pylab as py

data_points = df['X']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['Y']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['FFMC']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['DMC']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['DC']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['ISI']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['temp']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['RH']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['wind']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['rain']
sm.qqplot(data_points, line ='45')
py.show()

data_points = df['area']
sm.qqplot(data_points, line ='45')
py.show()

"""## Multivariate Non-graphical EDA

### Cross Tabulation
"""

pd.crosstab(df['FFMC'], df['area'], margins=True, normalize=False)

pd.crosstab(df['FFMC'], df['temp'], margins=True, normalize=False)

pd.crosstab(df['temp'], df['RH'], margins=True, normalize=False)

pd.crosstab(df['area'], df['temp'], margins=True, normalize=False)

pd.crosstab(df['DMC'], df['RH'], margins=True, normalize=False)

"""### Correlation & Covariance"""

df.corr()

import seaborn as sn
import matplotlib.pyplot as plt

plt.figure(figsize=(15,10))
corrMatrix = df.corr()
sn.heatmap(corrMatrix, annot=True)
plt.show()

"""## Multivariate Graphical

### Univariate graphs by category

#### X Plot
"""

df['X'].value_counts().plot.bar()

df['X'].value_counts().sort_index().plot.area()

df['X'].value_counts().sort_index().plot.line()

"""#### Y Plot"""

df['Y'].value_counts().plot.bar()

df['Y'].value_counts().sort_index().plot.area()

df['Y'].value_counts().sort_index().plot.line()

"""#### FFMC Plot"""

df['FFMC'].value_counts().plot.bar()

df['FFMC'].value_counts().sort_index().plot.area()

df['FFMC'].value_counts().sort_index().plot.line()

"""#### DMC Plot"""

df['DMC'].value_counts().plot.bar()

df['DMC'].value_counts().sort_index().plot.area()

df['DMC'].value_counts().sort_index().plot.line()

"""#### DC Plot"""

df['DC'].value_counts().plot.bar()

df['DC'].value_counts().sort_index().plot.area()

df['DC'].value_counts().sort_index().plot.line()

"""#### ISI Plot"""

df['ISI'].value_counts().plot.bar()

df['ISI'].value_counts().sort_index().plot.area()

df['ISI'].value_counts().sort_index().plot.line()

"""#### Temperature Plot"""

df['temp'].value_counts().plot.bar()

df['temp'].value_counts().sort_index().plot.area()

df['temp'].value_counts().sort_index().plot.line()

"""#### RH Plot"""

df['RH'].value_counts().plot.bar()

df['RH'].value_counts().sort_index().plot.area()

df['RH'].value_counts().sort_index().plot.line()

"""#### Wind Plot"""

df['wind'].value_counts().plot.bar()

df['wind'].value_counts().sort_index().plot.area()

df['wind'].value_counts().sort_index().plot.line()

"""#### Rain Plot"""

df['rain'].value_counts().plot.bar()

df['rain'].value_counts().sort_index().plot.area()

df['rain'].value_counts().sort_index().plot.line()

"""#### Area Plot"""

df['area'].value_counts().plot.bar()

df['area'].value_counts().sort_index().plot.area()

df['area'].value_counts().sort_index().plot.line()

"""# REGRESI

## Regresi Linear
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import linear_model

x=df['DMC'].values.reshape(-1,1)

y=df['DC'].values.reshape(-1,1)

lm = linear_model.LinearRegression()
model = lm.fit(x,y)

a = lm.intercept_
a

b = lm.coef_
b

y_prediksi = model.predict(x)
plt.scatter(x,y)
plt.plot(x, y_prediksi, c='r')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Plot x vs y')

MSE = mean_squared_error(y, y_prediksi)
R2 = r2_score(y, y_prediksi)

MSE

R2

"""## Regresi Non Linear"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

df = pd.read_csv('/content/drive/My Drive/Data_Mining/forestfires.csv')

x=df['temp'].values.reshape(-1,1)
y=df['RH'].values.reshape(-1,1)

poly = PolynomialFeatures(degree=1)
x_poly = poly.fit_transform(x)

poly.fit(x_poly, y)

linreg = LinearRegression()
linreg.fit(x_poly, y)

y_pred = linreg.predict(x_poly)

plt.scatter(x,y, color='blue')
plt.plot(x,y_pred, color='red')
plt.show()

MSE = mean_squared_error(y, y_prediksi)
R2 = r2_score(y, y_prediksi)

MSE

R2